{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/client/map.js","filenameRelative":"/client/map.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/client/map.js.map","sourceFileName":"/client/map.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"map"},"ignored":false,"code":"var MAP_ZOOM = 15;\n\nMeteor.startup(function () {\n  GoogleMaps.load();\n});\n\nTemplate.map.onCreated(function () {\n  var self = this;\n\n  GoogleMaps.ready('map', function (map) {\n    var marker = void 0;\n\n    self.autorun(function () {\n      var latLng = Geolocation.latLng();\n      //Write user position to db\n      console.log(latLng);\n      var userId = Meteor.userId();\n      var userPosition = Position.findOne({ user: userId });\n\n      if (!userPosition && Meteor.userId()) {\n        Position.insert({\n          user: Meteor.userId(),\n          latLng: latLng\n        });\n      } else {\n        Position.update({ _id: userPosition._id }, { $set: { latLng: latLng } });\n      }\n      console.log(userPosition.latLng);\n      //Finished writing user position to db\n      if (!latLng) return;\n\n      if (!marker) {\n        marker = new google.maps.Marker({\n          position: new google.maps.LatLng(latLng.lat, latLng.lng),\n          map: map.instance,\n          label: 'R'\n        });\n      } else {\n        marker.setPosition(latLng);\n      }\n      map.instance.setCenter(marker.getPosition());\n      map.instance.setZoom(MAP_ZOOM);\n    });\n\n    //Add custom markers on map\n    google.maps.event.addListener(map.instance, 'click', function (event) {\n      Spots.insert({ lat: event.latLng.lat(), lng: event.latLng.lng(), user: Meteor.userId() });\n      console.log(Spots.find().fetch());\n    });\n\n    var markers = {};\n\n    Spots.find().observe({\n      added: function () {\n        function added(document) {\n          var marker = new google.maps.Marker({\n            draggable: true,\n            animation: google.maps.Animation.DROP,\n            position: new google.maps.LatLng(document.lat, document.lng),\n            label: 'S',\n            map: map.instance,\n            id: document._id\n          });\n\n          google.maps.event.addListener(marker, 'dragend', function (event) {\n            Spots.update(marker.id, { $set: { lat: event.latLng.lat(), lng: event.latLng.lng() } });\n          });\n\n          google.maps.event.addListener(marker, 'click', function (event) {\n            var selectedMarker = marker.id;\n            Session.set('place', marker.id);\n            console.log(selectedMarker);\n          });\n          markers[document._id] = marker;\n        }\n\n        return added;\n      }(),\n\n      changed: function () {\n        function changed(newDocument, oldDocument) {\n          markers[newDocument._id].setPosition({ lat: newDocument.lat, lng: newDocument.lng });\n        }\n\n        return changed;\n      }(),\n      removed: function () {\n        function removed(oldDocument) {\n          markers[oldDocument._id].setMap(null);\n          google.maps.event.clearInstanceListeners(markers[oldDocument._id]);\n          delete markers[oldDocument._id];\n        }\n\n        return removed;\n      }()\n    });\n  });\n});\n\nTemplate.map.helpers({\n  geolocationError: function () {\n    function geolocationError() {\n      var error = Geolocation.error();\n      return error && error.message;\n    }\n\n    return geolocationError;\n  }(),\n  mapOptions: function () {\n    function mapOptions() {\n      var latLng = Geolocation.latLng();\n      if (GoogleMaps.loaded() && latLng) {\n        return {\n          center: new google.maps.LatLng(latLng.lat, latLng.lng),\n          zoom: MAP_ZOOM\n        };\n      }\n    }\n\n    return mapOptions;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/client/map.js"],"names":[],"mappings":"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","file":"/client/map.js.map","sourcesContent":["let MAP_ZOOM = 15;\n\nMeteor.startup(function() {\n  GoogleMaps.load();\n});\n\nTemplate.map.onCreated(function() {\n  let self = this;\n\n  GoogleMaps.ready('map', function(map) {\n    let marker;\n\n    self.autorun(function () {\n      let latLng = Geolocation.latLng();\n      //Write user position to db\n      console.log(latLng);\n      const userId = Meteor.userId();\n      const userPosition = Position.findOne({user: userId});\n\n      if(!userPosition && Meteor.userId()) {\n        Position.insert({\n            user: Meteor.userId(),\n            latLng: latLng\n        });\n      }\n      else {\n        Position.update({_id: userPosition._id}, { $set: {latLng: latLng}});\n      }\n      console.log(userPosition.latLng);\n      //Finished writing user position to db\n      if(! latLng)\n      return;\n\n      if(!marker) {\n        marker = new google.maps.Marker({\n          position: new google.maps.LatLng(latLng.lat, latLng.lng),\n          map: map.instance,\n          label: 'R'\n        });\n      }\n\n      else {\n        marker.setPosition(latLng);\n      }\n      map.instance.setCenter(marker.getPosition());\n      map.instance.setZoom(MAP_ZOOM);\n\n\n    });\n\n    //Add custom markers on map\n    google.maps.event.addListener(map.instance, 'click', function(event) {\n      Spots.insert({ lat: event.latLng.lat(), lng: event.latLng.lng(), user: Meteor.userId() });\n      console.log(Spots.find().fetch());\n    });\n\n     var markers = {};\n\n    Spots.find().observe({\n      added (document) {\n        let marker = new google.maps.Marker({\n          draggable: true,\n          animation: google.maps.Animation.DROP,\n          position: new google.maps.LatLng(document.lat, document.lng),\n          label: 'S',\n          map: map.instance,\n          id: document._id\n        });\n\n        google.maps.event.addListener(marker, 'dragend', function(event) {\n          Spots.update(marker.id, {$set: {lat: event.latLng.lat(), lng: event.latLng.lng()}});\n        });\n\n        google.maps.event.addListener(marker, 'click', function(event) {\n          let selectedMarker = marker.id;\n          Session.set('place', marker.id);\n          console.log(selectedMarker);\n        });\n        markers[document._id] = marker;\n      },\n      changed: function (newDocument, oldDocument) {\n        markers[newDocument._id].setPosition({lat: newDocument.lat, lng: newDocument.lng});\n      },\n      removed: function (oldDocument) {\n        markers[oldDocument._id].setMap(null);\n        google.maps.event.clearInstanceListeners(markers[oldDocument._id]);\n        delete markers[oldDocument._id];\n      }\n    });\n\n\n  });\n});\n\nTemplate.map.helpers({\n  geolocationError: function () {\n    var error = Geolocation.error();\n    return error && error.message;\n  },\n  mapOptions: function () {\n    var latLng = Geolocation.latLng();\n    if(GoogleMaps.loaded() && latLng) {\n      return {\n        center: new google.maps.LatLng(latLng.lat, latLng.lng),\n        zoom: MAP_ZOOM\n      };\n    }\n  }\n});\n"]},"hash":"03a2a84f7b17bad6d798418ec8c5c5a2305e345f"}
