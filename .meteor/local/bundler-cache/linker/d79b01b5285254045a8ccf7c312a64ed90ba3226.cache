[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\nvar OAuth = Package.oauth.OAuth;\nvar Oauth = Package.oauth.Oauth;\nvar HTTP = Package.http.HTTP;\nvar HTTPInternals = Package.http.HTTPInternals;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar VK;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/mrt_accounts-vk/packages/mrt_accounts-vk.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/mrt:accounts-vk/lib/accounts_vk.js                                                                    //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nAccounts.oauth.registerService('vk');                                                                             // 1\n                                                                                                                  // 2\nif (Meteor.isClient) {                                                                                            // 3\n    Meteor.loginWithVk = function(options, callback) {                                                            // 4\n        // support a callback without options                                                                     // 5\n        if (! callback && typeof options === \"function\") {                                                        // 6\n            callback = options;                                                                                   // 7\n            options = null;                                                                                       // 8\n        }                                                                                                         // 9\n                                                                                                                  // 10\n        var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);        // 11\n        VK.requestCredential(options, credentialRequestCompleteCallback);                                         // 12\n    };                                                                                                            // 13\n} else {                                                                                                          // 14\n    Accounts.addAutopublishFields({                                                                               // 15\n        forLoggedInUser: ['services.vk'],                                                                         // 16\n        forOtherUsers: [                                                                                          // 17\n            'services.vk.id',                                                                                     // 18\n            'services.vk.nickname',                                                                               // 19\n            'services.vk.gender'                                                                                  // 20\n        ]                                                                                                         // 21\n    });                                                                                                           // 22\n}                                                                                                                 // 23\n                                                                                                                  // 24\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/mrt:accounts-vk/lib/vk_server.js                                                                      //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nVK = {};                                                                                                          // 1\n                                                                                                                  // 2\nOauth.registerService('vk', 2, null, function(query) {                                                            // 3\n                                                                                                                  // 4\n    var response    = getTokenResponse(query);                                                                    // 5\n    var accessToken = response.accessToken;                                                                       // 6\n    var identity    = getIdentity(accessToken);                                                                   // 7\n                                                                                                                  // 8\n    var serviceData = {                                                                                           // 9\n        accessToken: accessToken,                                                                                 // 10\n        expiresAt: (+new Date) + (1000 * response.expiresIn)                                                      // 11\n    };                                                                                                            // 12\n                                                                                                                  // 13\n    var whitelisted = ['uid', 'nickname', 'first_name', 'last_name', 'sex', 'bdate', 'timezone', 'photo', 'photo_big', 'city', 'country'];\n                                                                                                                  // 15\n    var fields = _.pick(identity, whitelisted);                                                                   // 16\n    _.extend(serviceData, fields);                                                                                // 17\n    if (response.email)                                                                                           // 18\n        serviceData.email = response.email;                                                                       // 19\n                                                                                                                  // 20\n    serviceData.id = serviceData.uid;                                                                             // 21\n    delete serviceData.uid;                                                                                       // 22\n                                                                                                                  // 23\n    return {                                                                                                      // 24\n        serviceData: serviceData,                                                                                 // 25\n        options: {                                                                                                // 26\n            profile: {                                                                                            // 27\n                name: identity.nickname || (identity.first_name + ' ' + identity.last_name)                       // 28\n            }                                                                                                     // 29\n        }                                                                                                         // 30\n    };                                                                                                            // 31\n});                                                                                                               // 32\n                                                                                                                  // 33\n// returns an object containing:                                                                                  // 34\n// - accessToken                                                                                                  // 35\n// - expiresIn: lifetime of token in seconds                                                                      // 36\nvar getTokenResponse = function (query) {                                                                         // 37\n    var config = ServiceConfiguration.configurations.findOne({service: 'vk'});                                    // 38\n    if (!config) {                                                                                                // 39\n        throw new ServiceConfiguration.ConfigError(\"Service not configured\");                                     // 40\n    }                                                                                                             // 41\n                                                                                                                  // 42\n    var responseContent;                                                                                          // 43\n                                                                                                                  // 44\n    try {                                                                                                         // 45\n        // Request an access token                                                                                // 46\n        responseContent = HTTP.post(                                                                              // 47\n            \"https://api.vk.com/oauth/access_token\", {                                                            // 48\n                params: {                                                                                         // 49\n                    client_id:     config.appId,                                                                  // 50\n                    client_secret: config.secret,                                                                 // 51\n                    code:          query.code,                                                                    // 52\n                    redirect_uri: Meteor.absoluteUrl(\"_oauth/vk?close=close\")                                     // 53\n                }                                                                                                 // 54\n            }).content;                                                                                           // 55\n                                                                                                                  // 56\n    } catch (err) {                                                                                               // 57\n        throw _.extend(new Error(\"Failed to complete OAuth handshake with vkontakte. \" + err.message),            // 58\n            {response: err.response});                                                                            // 59\n    }                                                                                                             // 60\n    // Success!  Extract the vkontakte access token and expiration                                                // 61\n    // time from the response                                                                                     // 62\n    var parsedResponse = JSON.parse(responseContent);                                                             // 63\n                                                                                                                  // 64\n    var vkAccessToken = parsedResponse.access_token;                                                              // 65\n    var vkExpires = parsedResponse.expires_in;                                                                    // 66\n                                                                                                                  // 67\n    if (!vkAccessToken) {                                                                                         // 68\n        throw new Error(\"Failed to complete OAuth handshake with vkontakte \" +                                    // 69\n            \"-- can't find access token in HTTP response. \" + responseContent);                                   // 70\n    }                                                                                                             // 71\n    return {                                                                                                      // 72\n        accessToken: vkAccessToken,                                                                               // 73\n        expiresIn: vkExpires,                                                                                     // 74\n        email: parsedResponse.email || false                                                                      // 75\n    };                                                                                                            // 76\n};                                                                                                                // 77\n                                                                                                                  // 78\nvar getIdentity = function (accessToken) {                                                                        // 79\n                                                                                                                  // 80\n    var result = HTTP.get(                                                                                        // 81\n        \"https://api.vk.com/method/users.get\", {params: {                                                         // 82\n            access_token: accessToken,                                                                            // 83\n            fields: 'uid, nickname, first_name, last_name, sex, bdate, timezone, photo, photo_big, city, country' // 84\n        }});                                                                                                      // 85\n                                                                                                                  // 86\n    if (result.error) // if the http response was an error                                                        // 87\n        throw result.error;                                                                                       // 88\n                                                                                                                  // 89\n    return result.data.response[0];                                                                               // 90\n};                                                                                                                // 91\n                                                                                                                  // 92\nVK.retrieveCredential = function(credentialToken) {                                                               // 93\n    return Oauth.retrieveCredential(credentialToken);                                                             // 94\n};                                                                                                                // 95\n                                                                                                                  // 96\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['mrt:accounts-vk'] = {}, {\n  VK: VK\n});\n\n})();\n","servePath":"/packages/mrt_accounts-vk.js","sourceMap":{"version":3,"sources":["/packages/mrt_accounts-vk/packages/mrt_accounts-vk.js"],"names":[],"mappingsfile":"/packages/mrt_accounts-vk.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/mrt:accounts-vk/lib/accounts_vk.js                                                                    //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nAccounts.oauth.registerService('vk');                                                                             // 1\n                                                                                                                  // 2\nif (Meteor.isClient) {                                                                                            // 3\n    Meteor.loginWithVk = function(options, callback) {                                                            // 4\n        // support a callback without options                                                                     // 5\n        if (! callback && typeof options === \"function\") {                                                        // 6\n            callback = options;                                                                                   // 7\n            options = null;                                                                                       // 8\n        }                                                                                                         // 9\n                                                                                                                  // 10\n        var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);        // 11\n        VK.requestCredential(options, credentialRequestCompleteCallback);                                         // 12\n    };                                                                                                            // 13\n} else {                                                                                                          // 14\n    Accounts.addAutopublishFields({                                                                               // 15\n        forLoggedInUser: ['services.vk'],                                                                         // 16\n        forOtherUsers: [                                                                                          // 17\n            'services.vk.id',                                                                                     // 18\n            'services.vk.nickname',                                                                               // 19\n            'services.vk.gender'                                                                                  // 20\n        ]                                                                                                         // 21\n    });                                                                                                           // 22\n}                                                                                                                 // 23\n                                                                                                                  // 24\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/mrt:accounts-vk/lib/vk_server.js                                                                      //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nVK = {};                                                                                                          // 1\n                                                                                                                  // 2\nOauth.registerService('vk', 2, null, function(query) {                                                            // 3\n                                                                                                                  // 4\n    var response    = getTokenResponse(query);                                                                    // 5\n    var accessToken = response.accessToken;                                                                       // 6\n    var identity    = getIdentity(accessToken);                                                                   // 7\n                                                                                                                  // 8\n    var serviceData = {                                                                                           // 9\n        accessToken: accessToken,                                                                                 // 10\n        expiresAt: (+new Date) + (1000 * response.expiresIn)                                                      // 11\n    };                                                                                                            // 12\n                                                                                                                  // 13\n    var whitelisted = ['uid', 'nickname', 'first_name', 'last_name', 'sex', 'bdate', 'timezone', 'photo', 'photo_big', 'city', 'country'];\n                                                                                                                  // 15\n    var fields = _.pick(identity, whitelisted);                                                                   // 16\n    _.extend(serviceData, fields);                                                                                // 17\n    if (response.email)                                                                                           // 18\n        serviceData.email = response.email;                                                                       // 19\n                                                                                                                  // 20\n    serviceData.id = serviceData.uid;                                                                             // 21\n    delete serviceData.uid;                                                                                       // 22\n                                                                                                                  // 23\n    return {                                                                                                      // 24\n        serviceData: serviceData,                                                                                 // 25\n        options: {                                                                                                // 26\n            profile: {                                                                                            // 27\n                name: identity.nickname || (identity.first_name + ' ' + identity.last_name)                       // 28\n            }                                                                                                     // 29\n        }                                                                                                         // 30\n    };                                                                                                            // 31\n});                                                                                                               // 32\n                                                                                                                  // 33\n// returns an object containing:                                                                                  // 34\n// - accessToken                                                                                                  // 35\n// - expiresIn: lifetime of token in seconds                                                                      // 36\nvar getTokenResponse = function (query) {                                                                         // 37\n    var config = ServiceConfiguration.configurations.findOne({service: 'vk'});                                    // 38\n    if (!config) {                                                                                                // 39\n        throw new ServiceConfiguration.ConfigError(\"Service not configured\");                                     // 40\n    }                                                                                                             // 41\n                                                                                                                  // 42\n    var responseContent;                                                                                          // 43\n                                                                                                                  // 44\n    try {                                                                                                         // 45\n        // Request an access token                                                                                // 46\n        responseContent = HTTP.post(                                                                              // 47\n            \"https://api.vk.com/oauth/access_token\", {                                                            // 48\n                params: {                                                                                         // 49\n                    client_id:     config.appId,                                                                  // 50\n                    client_secret: config.secret,                                                                 // 51\n                    code:          query.code,                                                                    // 52\n                    redirect_uri: Meteor.absoluteUrl(\"_oauth/vk?close=close\")                                     // 53\n                }                                                                                                 // 54\n            }).content;                                                                                           // 55\n                                                                                                                  // 56\n    } catch (err) {                                                                                               // 57\n        throw _.extend(new Error(\"Failed to complete OAuth handshake with vkontakte. \" + err.message),            // 58\n            {response: err.response});                                                                            // 59\n    }                                                                                                             // 60\n    // Success!  Extract the vkontakte access token and expiration                                                // 61\n    // time from the response                                                                                     // 62\n    var parsedResponse = JSON.parse(responseContent);                                                             // 63\n                                                                                                                  // 64\n    var vkAccessToken = parsedResponse.access_token;                                                              // 65\n    var vkExpires = parsedResponse.expires_in;                                                                    // 66\n                                                                                                                  // 67\n    if (!vkAccessToken) {                                                                                         // 68\n        throw new Error(\"Failed to complete OAuth handshake with vkontakte \" +                                    // 69\n            \"-- can't find access token in HTTP response. \" + responseContent);                                   // 70\n    }                                                                                                             // 71\n    return {                                                                                                      // 72\n        accessToken: vkAccessToken,                                                                               // 73\n        expiresIn: vkExpires,                                                                                     // 74\n        email: parsedResponse.email || false                                                                      // 75\n    };                                                                                                            // 76\n};                                                                                                                // 77\n                                                                                                                  // 78\nvar getIdentity = function (accessToken) {                                                                        // 79\n                                                                                                                  // 80\n    var result = HTTP.get(                                                                                        // 81\n        \"https://api.vk.com/method/users.get\", {params: {                                                         // 82\n            access_token: accessToken,                                                                            // 83\n            fields: 'uid, nickname, first_name, last_name, sex, bdate, timezone, photo, photo_big, city, country' // 84\n        }});                                                                                                      // 85\n                                                                                                                  // 86\n    if (result.error) // if the http response was an error                                                        // 87\n        throw result.error;                                                                                       // 88\n                                                                                                                  // 89\n    return result.data.response[0];                                                                               // 90\n};                                                                                                                // 91\n                                                                                                                  // 92\nVK.retrieveCredential = function(credentialToken) {                                                               // 93\n    return Oauth.retrieveCredential(credentialToken);                                                             // 94\n};                                                                                                                // 95\n                                                                                                                  // 96\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]